generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clients {
  client_id    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String         @unique @db.Uuid
  users        users          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  registration registration[]
}

model instructor_availability {
  availability_id String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instructor_id   String      @db.Uuid
  day_of_week     String      @db.VarChar(10)
  start_time      DateTime    @db.Time(6)
  end_time        DateTime    @db.Time(6)
  instructors     instructors @relation(fields: [instructor_id], references: [instructor_id], onDelete: Cascade, onUpdate: NoAction)
}

model instructor_specialty {
  specialty_id  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instructor_id String        @db.Uuid
  instrument_id Int
  level_id      String        @db.Uuid
  instructors   instructors   @relation(fields: [instructor_id], references: [instructor_id], onDelete: Cascade, onUpdate: NoAction)
  instruments   instruments   @relation(fields: [instrument_id], references: [instrument_id], onDelete: Cascade, onUpdate: NoAction)
  lesson_levels lesson_levels @relation(fields: [level_id], references: [level_id], onDelete: Cascade, onUpdate: NoAction)
}

model instructors {
  instructor_id           String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String                    @unique @db.Uuid
  employment_type         String                    @db.VarChar(20)
  instructor_availability instructor_availability[]
  instructor_specialty    instructor_specialty[]
  users                   users                     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  lesson_schedule         lesson_schedule[]
  lessons                 lessons[]
}

model instruments {
  instrument_id        Int                    @id @default(autoincrement())
  instrument_name      String                 @db.VarChar(50)
  instructor_specialty instructor_specialty[]
  rooms                rooms[]
}

model lesson_levels {
  level_id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  level_name           String                 @db.VarChar(50)
  instructor_specialty instructor_specialty[]
  lessons              lessons[]
}

model lesson_schedule {
  session_id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  lesson_id         String      @db.Uuid
  instructor_id     String      @db.Uuid
  room_id           String      @db.Uuid
  start_time        DateTime    @db.Timestamp(6)
  end_time          DateTime    @db.Timestamp(6)
  cancelled         Boolean?    @default(false)
  attendingcapacity Int?
  date              DateTime?   @db.Date
  instructors       instructors @relation(fields: [instructor_id], references: [instructor_id], onDelete: Cascade, onUpdate: NoAction)
  lessons           lessons     @relation(fields: [lesson_id], references: [lesson_id], onDelete: Cascade, onUpdate: NoAction)
  rooms             rooms       @relation(fields: [room_id], references: [room_id], onDelete: SetNull, onUpdate: NoAction)
}

model lessons {
  lesson_id       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  instructor_id   String            @db.Uuid
  lesson_name     String            @db.VarChar(100)
  level_id        String            @db.Uuid
  status          String            @db.Char(1)
  cost            Decimal           @db.Decimal(10, 2)
  total_lessons   Int
  capacity        Int
  start_date      DateTime          @db.Date
  lesson_schedule lesson_schedule[]
  instructors     instructors       @relation(fields: [instructor_id], references: [instructor_id], onDelete: Cascade, onUpdate: NoAction)
  lesson_levels   lesson_levels     @relation(fields: [level_id], references: [level_id], onDelete: Cascade, onUpdate: NoAction)
  registration    registration[]
}

model registration {
  registration_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id       String   @db.Uuid
  date_registered DateTime @db.Timestamp(6)
  paid            Boolean  @default(false)
  amount_paid     Decimal  @db.Decimal(10, 2)
  payment_method  String   @db.VarChar(20)
  lesson_id       String   @db.Uuid
  clients         clients  @relation(fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: NoAction)
  lessons         lessons  @relation(fields: [lesson_id], references: [lesson_id], onDelete: Cascade, onUpdate: NoAction)
}

model rooms {
  room_id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  room_type       String            @db.VarChar(50)
  capacity        Int
  availability    Boolean           @default(true)
  instrument_id   Int?
  lesson_schedule lesson_schedule[]
  instruments     instruments?      @relation(fields: [instrument_id], references: [instrument_id], onUpdate: NoAction)
}

model users {
  user_id      String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String       @db.VarChar(50)
  last_name    String       @db.VarChar(50)
  email        String       @unique @db.VarChar(100)
  phone_number String       @db.VarChar(15)
  status       String       @db.Char(1)
  password     String?      @db.VarChar
  clients      clients?
  instructors  instructors?
}
